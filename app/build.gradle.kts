/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.8/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application

    
    // Apply the ANTLR plugin to add support for generating ANTLR code.
    antlr
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application.
    implementation(libs.guava)

    // Use ANTLR 3.
    antlr("org.antlr:antlr-complete:3.5.3")

    // Use StringTemplate 3.
    implementation("org.antlr:stringtemplate:3.2.1")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

// Some variables to store paths. TODO: Use a better way to store paths (i.e. how to group them?).
val mainJavaSourcePath = "src/main/java"
val mainJavaSourcePackagePath = "org/javabujin/example"
val mainAntlrGeneratedSourcesPath = "${mainJavaSourcePath}/${mainJavaSourcePackagePath}/antlr"
val buildDirectory = layout.buildDirectory.get()


application {
    // Define the main class for the application.
    mainClass = "org.javabujin.example.App"
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.generateGrammarSource {
    // Copy the generated ANTLR source code to the source directory.
    doLast {
        copy {
            from("${buildDirectory}/generated-src/antlr/main")
            into(mainAntlrGeneratedSourcesPath)
        }
        // Clean up the original generated sources.
        file("${buildDirectory}/generated-src/antlr").deleteRecursively()
    }

    // Run when source dir has changed or was removed.
    outputs.dir(mainAntlrGeneratedSourcesPath)
}

tasks.clean {
    delete += listOf(
        // Clean up the generated ANTLR source code.
        mainAntlrGeneratedSourcesPath
    )
}